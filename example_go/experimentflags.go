// AUTOMATICALLY GENERATED BY OPENFEATURE CODEGEN, DO NOT EDIT.
package experimentflags

import (
	"context"
	"github.com/open-feature/go-sdk/openfeature"
)

type BooleanProvider func(evalCtx openfeature.EvaluationContext) bool
type BooleanProviderE func(ctx context.Context, evalCtx openfeature.EvaluationContext) (bool, error)
type BooleanProviderDetails func(ctx context.Context, evalCtx openfeature.EvaluationContext) (openfeature.BooleanEvaluationDetails, error)
type FloatProvider func(evalCtx openfeature.EvaluationContext) float64
type FloatProviderE func(ctx context.Context, evalCtx openfeature.EvaluationContext) (float64, error)
type FloatProviderDetails func(ctx context.Context, evalCtx openfeature.EvaluationContext) (openfeature.FloatEvaluationDetails, error)
type IntProvider func(evalCtx openfeature.EvaluationContext) int64
type IntProviderE func(ctx context.Context, evalCtx openfeature.EvaluationContext) (int64, error)
type IntProviderDetails func(ctx context.Context, evalCtx openfeature.EvaluationContext) (openfeature.IntEvaluationDetails, error)
type StringProvider func(evalCtx openfeature.EvaluationContext) string
type StringProviderE func(ctx context.Context, evalCtx openfeature.EvaluationContext) (string, error)
type StringProviderDetails func(ctx context.Context, evalCtx openfeature.EvaluationContext) (openfeature.StringEvaluationDetails, error)

var client openfeature.IClient = nil
// Discount percentage applied to purchases.
var DiscountPercentage = struct {
    // Value provides the value of the flag DiscountPercentage.
    // Warning: Value will ignore any evaluation errors.
    // If you want obtain the value as well as the error, use ValueE
    // or ValueWithDetails.
    Value FloatProvider
    // ValueE returns the value of the flag DiscountPercentage,
    // as well as the evaluation error, if present.
    ValueE FloatProviderE
    // ValueWithDetails returns the value of the flag DiscountPercentage,
    // the evaluation error, if any, and the evaluation details.
    ValueWithDetails FloatProviderDetails
}{
    Value: func(evalCtx openfeature.EvaluationContext) float64 {
        ctx := context.Background()
        val, _ := client.FloatValue(ctx, "discountPercentage", 0.15, evalCtx)
        return val
    },
    ValueE: func(ctx context.Context, evalCtx openfeature.EvaluationContext) (float64, error) {
        return client.FloatValue(ctx, "discountPercentage", 0.15, evalCtx)
    },
    ValueWithDetails: func(ctx context.Context, evalCtx openfeature.EvaluationContext) (openfeature.FloatEvaluationDetails, error){
        return client.FloatValueDetails(ctx, "discountPercentage", 0.15, evalCtx)
    },
}
// Controls whether Feature A is enabled.
var EnableFeatureA = struct {
    // Value provides the value of the flag EnableFeatureA.
    // Warning: Value will ignore any evaluation errors.
    // If you want obtain the value as well as the error, use ValueE
    // or ValueWithDetails.
    Value BooleanProvider
    // ValueE returns the value of the flag EnableFeatureA,
    // as well as the evaluation error, if present.
    ValueE BooleanProviderE
    // ValueWithDetails returns the value of the flag EnableFeatureA,
    // the evaluation error, if any, and the evaluation details.
    ValueWithDetails BooleanProviderDetails
}{
    Value: func(evalCtx openfeature.EvaluationContext) bool {
        ctx := context.Background()
        val, _ := client.BooleanValue(ctx, "enableFeatureA", false, evalCtx)
        return val
    },
    ValueE: func(ctx context.Context, evalCtx openfeature.EvaluationContext) (bool, error) {
        return client.BooleanValue(ctx, "enableFeatureA", false, evalCtx)
    },
    ValueWithDetails: func(ctx context.Context, evalCtx openfeature.EvaluationContext) (openfeature.BooleanEvaluationDetails, error){
        return client.BooleanValueDetails(ctx, "enableFeatureA", false, evalCtx)
    },
}
// The message to use for greeting users.
var GreetingMessage = struct {
    // Value provides the value of the flag GreetingMessage.
    // Warning: Value will ignore any evaluation errors.
    // If you want obtain the value as well as the error, use ValueE
    // or ValueWithDetails.
    Value StringProvider
    // ValueE returns the value of the flag GreetingMessage,
    // as well as the evaluation error, if present.
    ValueE StringProviderE
    // ValueWithDetails returns the value of the flag GreetingMessage,
    // the evaluation error, if any, and the evaluation details.
    ValueWithDetails StringProviderDetails
}{
    Value: func(evalCtx openfeature.EvaluationContext) string {
        ctx := context.Background()
        val, _ := client.StringValue(ctx, "greetingMessage", "Hello there!", evalCtx)
        return val
    },
    ValueE: func(ctx context.Context, evalCtx openfeature.EvaluationContext) (string, error) {
        return client.StringValue(ctx, "greetingMessage", "Hello there!", evalCtx)
    },
    ValueWithDetails: func(ctx context.Context, evalCtx openfeature.EvaluationContext) (openfeature.StringEvaluationDetails, error){
        return client.StringValueDetails(ctx, "greetingMessage", "Hello there!", evalCtx)
    },
}
// Maximum allowed length for usernames.
var UsernameMaxLength = struct {
    // Value provides the value of the flag UsernameMaxLength.
    // Warning: Value will ignore any evaluation errors.
    // If you want obtain the value as well as the error, use ValueE
    // or ValueWithDetails.
    Value IntProvider
    // ValueE returns the value of the flag UsernameMaxLength,
    // as well as the evaluation error, if present.
    ValueE IntProviderE
    // ValueWithDetails returns the value of the flag UsernameMaxLength,
    // the evaluation error, if any, and the evaluation details.
    ValueWithDetails IntProviderDetails
}{
    Value: func(evalCtx openfeature.EvaluationContext) int64 {
        ctx := context.Background()
        val, _ := client.IntValue(ctx, "usernameMaxLength", 50, evalCtx)
        return val
    },
    ValueE: func(ctx context.Context, evalCtx openfeature.EvaluationContext) (int64, error) {
        return client.IntValue(ctx, "usernameMaxLength", 50, evalCtx)
    },
    ValueWithDetails: func(ctx context.Context, evalCtx openfeature.EvaluationContext) (openfeature.IntEvaluationDetails, error){
        return client.IntValueDetails(ctx, "usernameMaxLength", 50, evalCtx)
    },
}

func init() {
	client = openfeature.GetApiInstance().GetClient()
}
