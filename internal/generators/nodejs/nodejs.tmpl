import {
  OpenFeature,
} from "@openfeature/server-sdk";
import type {
  EvaluationContext,
  EvaluationDetails,
} from "@openfeature/server-sdk";

export interface GeneratedClient {
{{ range .Flagset.Flags }}
  /**
  * {{ .Description }}
  * 
  * **Details:**
  * - flag key: `{{ .Key }}`
  * - default value: `{{ .DefaultValue }}`
  * - type: `{{ .Type | OpenFeatureType }}`
  */
  {{ .Key | ToCamel }}(context?: EvaluationContext): Promise<{{ .Type | OpenFeatureType }}>;
{{ end}}
}

/**
 * A client generated by the OpenFeature cli that's compatible
 * with the `@openfeature/server-sdk` and supported providers.
 */
export function getGeneratedClient(context?: EvaluationContext): GeneratedClient {
  const client = OpenFeature.getClient(context)

  return {
{{ range .Flagset.Flags }}
    {{ .Key | ToCamel }}: (context?: EvaluationContext): Promise<{{ .Type | OpenFeatureType }}> => {
      client.getBooleanValue({{ .Key | Quote }}, {{ .DefaultValue | QuoteString }}, context);
    }
{{ end}}
  }
}